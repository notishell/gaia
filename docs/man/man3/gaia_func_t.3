.TH "gaia_func_t" 3 "Tue Jul 7 2015" "Version 1.0.0" "GAIA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gaia_func_t \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <gaia\&.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int(* \fBinstall\fP )(struct \fBgaia_func_t\fP *obj, struct \fBgaia_addon_t\fP *addon)"
.br
.ti -1c
.RI "int(* \fBuninstall\fP )(struct \fBgaia_func_t\fP *obj, \fBu8\fP id)"
.br
.ti -1c
.RI "struct \fBgaia_addon_func_t\fP *(* \fBget_addon_by_id\fP )(\fBu8\fP id)"
.br
.ti -1c
.RI "struct \fBgaia_addon_func_t\fP *(* \fBget_addon_by_type\fP )(\fBu4\fP type)"
.br
.ti -1c
.RI "int(* \fBget_addon_list_by_type\fP )(\fBu4\fP type, int len, struct \fBgaia_addon_func_t\fP **addon)"
.br
.ti -1c
.RI "int(* \fBhandle_message\fP )(struct \fBgaia_message_t\fP *msg)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Functions provided by add-on controller to run the system\&.
.PP
Example:
.PP
.PP
.nf
config_func_t *config;
struct gaia_func_t *gaia_func = global_gaia_func;

if (gaia_func->install(gaia_func, simple_config_info()) == 0) {
  config = gaia_func->get_addon_by_id(simple_config_info()->id);
  if (config) {
    gaia_func->handle_message(&msg);
  }
}
.fi
.PP
 
.SH "Field Documentation"
.PP 
.SS "int(* gaia_func_t::install) (struct \fBgaia_func_t\fP *obj, struct \fBgaia_addon_t\fP *addon)"
A method to install add-on\&. The first argument must be the 'gaia_func' pointer\&. Once installed using current add-on's 'gaia_func', current add-on became the father add-on of new install\&. Return non-zero if not success\&.
.PP
Example:
.PP
.PP
.nf
gaia_func->install(gaia_func, simple_config_info());
.fi
.PP
 
.SS "int(* gaia_func_t::uninstall) (struct \fBgaia_func_t\fP *obj, \fBu8\fP id)"
Method to remove add-on by add-on id\&. Only add-on's direct or indirect father can remove it\&. Return non-zero if not success\&.
.PP
Example:
.PP
.PP
.nf
gaia_func->uninstall(gaia_func, ADDON_ID_INIT);
.fi
.PP
 
.SS "struct \fBgaia_addon_func_t\fP*(* gaia_func_t::get_addon_by_id) (\fBu8\fP id)"
Get function sets of a add-on by id\&. Use the highest version if exist 2+ add-on with same id\&.
.PP
Example:
.PP
.PP
.nf
struct config_func_t *config;
config = gaia_func->get_addon_by_id(ADDON_ID_SIMPLE_CONFIG);
if (config) {
  printf("server: %s\n", config->remote_server_hostname());
}
.fi
.PP
 
.SS "struct \fBgaia_addon_func_t\fP*(* gaia_func_t::get_addon_by_type) (\fBu4\fP type)"
Get function sets of a add-on by type\&. Use the last installed version if exist 2+ add-on with same type\&.
.PP
Example:
.PP
.PP
.nf
struct config_func_t *config;
config = gaia_func->get_addon_by_type(ADDON_TYPE_CONFIG);
if (config) {
  printf("server: %s\n", config->remote_server_hostname());
}
.fi
.PP
 
.SS "int(* gaia_func_t::get_addon_list_by_type) (\fBu4\fP type, int len, struct \fBgaia_addon_func_t\fP **addon)"
Get add-on function sets list by type\&. Return N or -N if find N add-ons and saved N\&. -N means buffer is not enough\&.
.PP
Example:
.PP
.PP
.nf
int len;
struct config_func_t *config[5];

len = gaia_func->get_addon_list_by_type(ADDON_TYPE_CONFIG, 5, config);

printf("find %d add-on of type config\&.\n", len >= 0 ? len : -len);
.fi
.PP
 
.SS "int(* gaia_func_t::handle_message) (struct \fBgaia_message_t\fP *msg)"
Handle a message\&. Return non-zero if not success\&.
.PP
Example:
.PP
.PP
.nf
struct gaia_message_t msg;
msg\&.id = ADDON_ID_INIT;
msg\&.type = 0;
msg\&.size = 16;
gaia_func->handle_message(&msg);
.fi
.PP
 

.SH "Author"
.PP 
Generated automatically by Doxygen for GAIA from the source code\&.
